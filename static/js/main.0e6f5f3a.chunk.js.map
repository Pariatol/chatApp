{"version":3,"sources":["components/TypePseudo.js","functions/fetchMsgs.js","components/PrintMsgs.js","functions/writeMsg.js","config.js","App.js","serviceWorker.js","index.js"],"names":["TypePseudo","props","className","onSubmit","e","preventDefault","form","document","getElementById","setPseudo","elements","usernameInput","value","localStorage","setItem","handleSubmit","id","type","name","class","placeholder","autofocus","autoComplete","fetchMsgs","msgs","setMsg","length","firebase","database","ref","on","snap","listMsgs","forEach","childSnapshot","key","childData","val","console","log","msg","push","pseudo","username","PrintMsgs","useState","useEffect","slice","map","item","writeMsg","firebaseConfig","apiKey","process","REACT_APP_WEATHER_API_KEY","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","getItem","Fragment","querySelector","msgInput","reset","for","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0e6f5f3a.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\n\r\nfunction TypePseudo(props){\r\n\r\n    const handleSubmit = (e) => {\r\n      e.preventDefault();\r\n      let form = document.getElementById('getPseudo');\r\n      props.setPseudo(form.elements.usernameInput.value);\r\n      localStorage.setItem('chatUsername', form.elements.usernameInput.value);\r\n\r\n    }\r\n  \r\n    return(\r\n      <div className=\"typePseudo\">\r\n          <form onSubmit={(e)=>handleSubmit(e)} id=\"getPseudo\" >\r\n          <input type=\"text\" name=\"usernameInput\" class=\"testInput usernameInput\" placeholder=\"Write your name\" autofocus autoComplete=\"off\"/>\r\n          <input type=\"submit\"/>\r\n          </form>\r\n      </div>\r\n    )\r\n  \r\n  }\r\n\r\n  export default TypePseudo;","import firebase from \"firebase\";\r\n\r\nconst fetchMsgs = (msgs,setMsg) => {\r\n\r\n    if(msgs.length===0){\r\n        firebase.database().ref('messages').on('value',(snap)=>{\r\n            let listMsgs = [];\r\n            snap.forEach(function(childSnapshot) {\r\n            var childKey = childSnapshot.key;\r\n            var childData = childSnapshot.val();\r\n            console.log(childData.msg)\r\n            listMsgs.push({msg:childData.msg,\r\n                        pseudo:childData.username})\r\n        })\r\n            setMsg(listMsgs)\r\n        })\r\n    } else {\r\n        firebase.database().ref('messages').on('value',(snap)=>{\r\n            let listMsgs = [...msgs];\r\n\r\n            listMsgs.push({\r\n                msg:snap[snap.length-1].msg,\r\n                pseudo:snap[snap.length-1].username\r\n            })\r\n            \r\n                setMsg(listMsgs)\r\n            })\r\n    }\r\n    \r\n  }\r\n\r\n  export default fetchMsgs;","import React, {useState, useEffect} from 'react';\r\nimport fetchMsgs from \"../functions/fetchMsgs\";\r\n\r\n\r\nfunction PrintMsgs(){\r\n\r\n    const [msg,setMsg] = useState([]);\r\n  \r\n    useEffect(()=>{\r\n    fetchMsgs(msg,setMsg)\r\n  },[])\r\n  \r\n    return(\r\n      <div className=\"printMsgs\">\r\n        {msg.slice(-15).map(item=>{\r\n          return <div className=\"msg\"><strong>{item.pseudo}</strong> - {item.msg}</div>\r\n        })}\r\n      </div>\r\n    )\r\n  } \r\n\r\n  export default PrintMsgs;","import firebase from \"firebase\";\r\n\r\nconst writeMsg = (username, msg) => {\r\n    firebase.database().ref('messages/').push({\r\n      username: username,\r\n      msg : msg\r\n    });\r\n  }\r\n\r\nexport default writeMsg;","import * as firebase from \"firebase/app\";\r\n\r\nconst API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\r\n\r\nvar firebaseConfig = {\r\n    apiKey: API_KEY,\r\n    authDomain: \"bestchatappever.firebaseapp.com\",\r\n    databaseURL: \"https://bestchatappever.firebaseio.com\",\r\n    projectId: \"bestchatappever\",\r\n    storageBucket: \"bestchatappever.appspot.com\",\r\n    messagingSenderId: \"1010887688364\",\r\n    appId: \"1:1010887688364:web:591cdbdabf7507b0a19f09\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);","import React, {useState, useEffect} from 'react';\nimport TypePseudo from \"./components/TypePseudo\";\nimport PrintMsgs from \"./components/PrintMsgs\";\nimport writeMsg from \"./functions/writeMsg\";\nimport './App.css';\nimport './config';\n\nfunction App() {\n\n  const handleSubmit = (e,pseudo) => {\n    e.preventDefault();\n    let form = document.querySelector('form');\n    writeMsg(pseudo,form.elements.msgInput.value);\n    form.reset();\n  }\n\n  const [pseudo,setPseudo] = useState('');\n\n  useEffect(()=>{\n    setPseudo(localStorage.getItem('chatUsername') || '')\n\n  },[])\n\n  return (\n    <div className=\"App\">\n      {!pseudo?<TypePseudo setPseudo={setPseudo}/>:\n      <React.Fragment>\n      <h1 className=\"chatTitle\">The Best Chat App Ever</h1>\n      <PrintMsgs pseudo={pseudo}/>\n        <form onSubmit={(e)=>handleSubmit(e,pseudo)} class=\"msgForm\">\n        <label for=\"msgInput\" class=\"testInput\">{pseudo}</label>\n        <input type=\"text\" name=\"msgInput\" class=\"testInput\" placeholder=\"write something...\" autofocus autoComplete=\"off\"/>\n        <input type=\"submit\"/>\n        </form>\n        </React.Fragment>\n        }\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}