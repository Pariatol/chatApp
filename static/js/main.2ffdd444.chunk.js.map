{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["firebaseConfig","apiKey","process","REACT_APP_WEATHER_API_KEY","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebase","App","handleSubmit","e","pseudo","preventDefault","username","msg","form","document","querySelector","elements","msgInput","value","ref","push","reset","useState","setPseudo","className","Fragment","PrintMsgs","onSubmit","class","for","type","name","placeholder","autofocus","TypePseudo","props","getElementById","usernameInput","id","setMsg","useEffect","on","snap","listMsgs","forEach","childSnapshot","key","childData","val","console","log","fetchMsgs","slice","map","item","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iQAQIA,EAAiB,CACnBC,OAJcC,uLAAYC,0BAK1BC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,gBACnBC,MAAO,8CAGTC,gBAAuBV,GAERU,aAyDAC,MA9Bf,WAEE,IAAMC,EAAe,SAACC,EAAEC,GACtBD,EAAEE,iBACF,IA7BcC,EAAUC,EA6BpBC,EAAOC,SAASC,cAAc,QA7BpBJ,EA8BLF,EA9BeG,EA8BRC,EAAKG,SAASC,SAASC,MA7BzCb,aAAoBc,IAAI,aAAaC,KAAK,CACxCT,SAAUA,EACVC,IAAMA,IA4BNC,EAAKQ,SANM,EAScC,mBAAS,IATvB,mBASNb,EATM,KASCc,EATD,KAab,OACE,yBAAKC,UAAU,OACXf,EACF,kBAAC,IAAMgB,SAAP,KACA,wBAAID,UAAU,aAAd,0BACA,kBAACE,EAAD,CAAWjB,OAAQA,IACjB,0BAAMkB,SAAU,SAACnB,GAAD,OAAKD,EAAaC,EAAEC,IAASmB,MAAM,WACnD,2BAAOC,IAAI,WAAWD,MAAM,aAAanB,GACzC,2BAAOqB,KAAK,OAAOC,KAAK,WAAWH,MAAM,YAAYI,YAAY,qBAAqBC,WAAS,IAC/F,2BAAOH,KAAK,aAPL,kBAACI,EAAD,CAAYX,UAAWA,MAiBtC,SAASW,EAAWC,GAQlB,OACE,yBAAKX,UAAU,cACX,0BAAMG,SAAU,SAACnB,GAAD,OARD,SAACA,GACpBA,EAAEE,iBACF,IAAIG,EAAOC,SAASsB,eAAe,aACnCD,EAAMZ,UAAUV,EAAKG,SAASqB,cAAcnB,OAKnBX,CAAaC,IAAI8B,GAAG,aACzC,2BAAOR,KAAK,OAAOC,KAAK,gBAAgBH,MAAM,YAAYI,YAAY,kBAAkBC,WAAS,IACjG,2BAAOH,KAAK,aAOpB,SAASJ,IAAY,IAAD,EAEGJ,mBAAS,IAFZ,mBAEXV,EAFW,KAEP2B,EAFO,KAQlB,OAJAC,qBAAU,YAzEM,SAACD,GAEjBlC,aAAoBc,IAAI,YAAYsB,GAAG,SAAQ,SAACC,GAC9C,IAAIC,EAAW,GACfD,EAAKE,SAAQ,SAASC,GACLA,EAAcC,IAA7B,IACIC,EAAYF,EAAcG,MAC9BC,QAAQC,IAAIH,EAAUnC,KACtB+B,EAASvB,KAAK,CAACR,IAAImC,EAAUnC,IACfH,OAAOsC,EAAUpC,cAE/B4B,EAAOI,MA+DXQ,CAAUZ,KACV,IAGE,yBAAKf,UAAU,aACZZ,EAAIwC,OAAO,IAAIC,KAAI,SAAAC,GAClB,OAAO,yBAAK9B,UAAU,OAAM,gCAAS8B,EAAK7C,QAAnC,MAAuD6C,EAAK1C,SCjGvD2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhD,SAASsB,eAAe,SDyHpB,kBAAmB2B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.2ffdd444.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport './config'\nimport * as firebase from \"firebase/app\";\n\nconst API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\n\n\nvar firebaseConfig = {\n  apiKey: API_KEY,\n  authDomain: \"bestchatappever.firebaseapp.com\",\n  databaseURL: \"https://bestchatappever.firebaseio.com\",\n  projectId: \"bestchatappever\",\n  storageBucket: \"bestchatappever.appspot.com\",\n  messagingSenderId: \"1010887688364\",\n  appId: \"1:1010887688364:web:591cdbdabf7507b0a19f09\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nvar database = firebase.database();\n\nconst writeMsg = (username, msg) => {\n  firebase.database().ref('messages/').push({\n    username: username,\n    msg : msg\n  });\n}\n\nconst fetchMsgs = (setMsg) => {\n\n  firebase.database().ref('messages').on('value',(snap)=>{\n    let listMsgs = [];\n    snap.forEach(function(childSnapshot) {\n      var childKey = childSnapshot.key;\n      var childData = childSnapshot.val();\n      console.log(childData.msg)\n      listMsgs.push({msg:childData.msg,\n                    pseudo:childData.username})\n    })\n      setMsg(listMsgs)\n  })\n  \n}\n\n\n\nfunction App() {\n\n  const handleSubmit = (e,pseudo) => {\n    e.preventDefault();\n    let form = document.querySelector('form');\n    writeMsg(pseudo,form.elements.msgInput.value);\n    form.reset();\n  }\n\n  const [pseudo,setPseudo] = useState('');\n\n\n\n  return (\n    <div className=\"App\">\n      {!pseudo?<TypePseudo setPseudo={setPseudo}/>:\n      <React.Fragment>\n      <h1 className=\"chatTitle\">The Best Chat App Ever</h1>\n      <PrintMsgs pseudo={pseudo}/>\n        <form onSubmit={(e)=>handleSubmit(e,pseudo)} class=\"msgForm\">\n        <label for=\"msgInput\" class=\"testInput\">{pseudo}</label>\n        <input type=\"text\" name=\"msgInput\" class=\"testInput\" placeholder=\"write something...\" autofocus/>\n        <input type=\"submit\"/>\n        </form>\n        </React.Fragment>\n        }\n    </div>\n  );\n}\n\nexport default App;\n\nfunction TypePseudo(props){\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    let form = document.getElementById('getPseudo');\n    props.setPseudo(form.elements.usernameInput.value);\n  }\n\n  return(\n    <div className=\"typePseudo\">\n        <form onSubmit={(e)=>handleSubmit(e)} id=\"getPseudo\" >\n        <input type=\"text\" name=\"usernameInput\" class=\"testInput\" placeholder=\"Write your name\" autofocus/>\n        <input type=\"submit\"/>\n        </form>\n    </div>\n  )\n\n}\n\nfunction PrintMsgs(){\n\n  const [msg,setMsg] = useState([]);\n\n  useEffect(()=>{\n  fetchMsgs(setMsg)\n},[])\n\n  return(\n    <div className=\"printMsgs\">\n      {msg.slice(-15).map(item=>{\n        return <div className=\"msg\"><strong>{item.pseudo}</strong> - {item.msg}</div>\n      })}\n    </div>\n  )\n} ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}